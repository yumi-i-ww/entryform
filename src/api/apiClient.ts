// 
// Generated by @himenon/openapi-typescript-code-generator v1.0.11
// 
// OpenApi : 3.1.0
// 
// 


import { Schemas } from "./types";
export interface Parameter$fetchInquiryItem {
    id: string;
    /** 問い合わせデータの作成時間 */
    created_at: string;
}
export interface Response$fetchInquiryItem$Status$200 {
    "application/json": Schemas.InquiryResponseSchema;
}
export interface Response$fetchInquiryItem$Status$400 {
    /** Bad Request Error Schema */
    "application/json": {
        /**
         *
         * HTTPのステータスコードです。
         * 詳しくは、[HTTPステータスコード](https://developer.mozilla.org/ja/docs/Web/HTTP/Status)を参照してください。
         * これがレスポンスの型に入るのはLambda Powertoolsの仕様です。
         *
         */
        status_code: number;
        /** Bad Request Error Message */
        message: string;
    };
}
export interface Response$fetchInquiryItem$Status$401 {
    /** Unauthorized Error Schema */
    "application/json": {
        /**
         *
         * HTTPのステータスコードです。
         * 詳しくは、[HTTPステータスコード](https://developer.mozilla.org/ja/docs/Web/HTTP/Status)を参照してください。
         * これがレスポンスの型に入るのはLambda Powertoolsの仕様です。
         *
         */
        status_code: number;
        /** Unauthorized Error Message */
        message: string;
    };
}
export interface Response$fetchInquiryItem$Status$404 {
    /** Not Found Error Schema */
    "application/json": {
        /**
         *
         * HTTPのステータスコードです。
         * 詳しくは、[HTTPステータスコード](https://developer.mozilla.org/ja/docs/Web/HTTP/Status)を参照してください。
         * これがレスポンスの型に入るのはLambda Powertoolsの仕様です。
         */
        status_code: number;
        /** Not Found Error Message */
        message: string;
    };
}
export interface Response$fetchInquiryItem$Status$422 {
    "application/json": Schemas.HTTPValidationError;
}
export interface Response$fetchInquiryItem$Status$500 {
    /** Internal Server Error Schema */
    "application/json": {
        /**
         *
         * HTTPのステータスコードです。
         * 詳しくは、[HTTPステータスコード](https://developer.mozilla.org/ja/docs/Web/HTTP/Status)を参照してください。
         * これがレスポンスの型に入るのはLambda Powertoolsの仕様です。
         */
        status_code: number;
        /** Internal Server Error Message */
        message: string;
    };
}
export interface Parameter$findEntryById {
    id: string;
    createdAt: string;
}
export interface Response$findEntryById$Status$200 {
    "application/json": Schemas.EntrySchema;
}
export interface Response$findEntryById$Status$400 {
    /** Bad Request Error Schema */
    "application/json": {
        /**
         *
         * HTTPのステータスコードです。
         * 詳しくは、[HTTPステータスコード](https://developer.mozilla.org/ja/docs/Web/HTTP/Status)を参照してください。
         * これがレスポンスの型に入るのはLambda Powertoolsの仕様です。
         *
         */
        status_code: number;
        /** Bad Request Error Message */
        message: string;
    };
}
export interface Response$findEntryById$Status$401 {
    /** Unauthorized Error Schema */
    "application/json": {
        /**
         *
         * HTTPのステータスコードです。
         * 詳しくは、[HTTPステータスコード](https://developer.mozilla.org/ja/docs/Web/HTTP/Status)を参照してください。
         * これがレスポンスの型に入るのはLambda Powertoolsの仕様です。
         *
         */
        status_code: number;
        /** Unauthorized Error Message */
        message: string;
    };
}
export interface Response$findEntryById$Status$404 {
    /** Not Found Error Schema */
    "application/json": {
        /**
         *
         * HTTPのステータスコードです。
         * 詳しくは、[HTTPステータスコード](https://developer.mozilla.org/ja/docs/Web/HTTP/Status)を参照してください。
         * これがレスポンスの型に入るのはLambda Powertoolsの仕様です。
         */
        status_code: number;
        /** Not Found Error Message */
        message: string;
    };
}
export interface Response$findEntryById$Status$422 {
    "application/json": Schemas.HTTPValidationError;
}
export interface Response$findEntryById$Status$500 {
    /** Internal Server Error Schema */
    "application/json": {
        /**
         *
         * HTTPのステータスコードです。
         * 詳しくは、[HTTPステータスコード](https://developer.mozilla.org/ja/docs/Web/HTTP/Status)を参照してください。
         * これがレスポンスの型に入るのはLambda Powertoolsの仕様です。
         */
        status_code: number;
        /** Internal Server Error Message */
        message: string;
    };
}
export interface Response$fetchAllInquiryItems$Status$200 {
    "application/json": Schemas.InquiryResponseSchema[];
}
export interface Response$fetchAllInquiryItems$Status$400 {
    /** Bad Request Error Schema */
    "application/json": {
        /**
         *
         * HTTPのステータスコードです。
         * 詳しくは、[HTTPステータスコード](https://developer.mozilla.org/ja/docs/Web/HTTP/Status)を参照してください。
         * これがレスポンスの型に入るのはLambda Powertoolsの仕様です。
         *
         */
        status_code: number;
        /** Bad Request Error Message */
        message: string;
    };
}
export interface Response$fetchAllInquiryItems$Status$401 {
    /** Unauthorized Error Schema */
    "application/json": {
        /**
         *
         * HTTPのステータスコードです。
         * 詳しくは、[HTTPステータスコード](https://developer.mozilla.org/ja/docs/Web/HTTP/Status)を参照してください。
         * これがレスポンスの型に入るのはLambda Powertoolsの仕様です。
         *
         */
        status_code: number;
        /** Unauthorized Error Message */
        message: string;
    };
}
export interface Response$fetchAllInquiryItems$Status$404 {
    /** Not Found Error Schema */
    "application/json": {
        /**
         *
         * HTTPのステータスコードです。
         * 詳しくは、[HTTPステータスコード](https://developer.mozilla.org/ja/docs/Web/HTTP/Status)を参照してください。
         * これがレスポンスの型に入るのはLambda Powertoolsの仕様です。
         */
        status_code: number;
        /** Not Found Error Message */
        message: string;
    };
}
export interface Response$fetchAllInquiryItems$Status$422 {
    "application/json": Schemas.HTTPValidationError;
}
export interface Response$fetchAllInquiryItems$Status$500 {
    /** Internal Server Error Schema */
    "application/json": {
        /**
         *
         * HTTPのステータスコードです。
         * 詳しくは、[HTTPステータスコード](https://developer.mozilla.org/ja/docs/Web/HTTP/Status)を参照してください。
         * これがレスポンスの型に入るのはLambda Powertoolsの仕様です。
         */
        status_code: number;
        /** Internal Server Error Message */
        message: string;
    };
}
export interface RequestBody$postInquiryItem {
    "application/json": Schemas.CreateInquiryRequestSchema;
}
export interface Response$postInquiryItem$Status$200 {
    "application/json": Schemas.InquiryResponseSchema;
}
export interface Response$postInquiryItem$Status$400 {
    /** Bad Request Error Schema */
    "application/json": {
        /**
         *
         * HTTPのステータスコードです。
         * 詳しくは、[HTTPステータスコード](https://developer.mozilla.org/ja/docs/Web/HTTP/Status)を参照してください。
         * これがレスポンスの型に入るのはLambda Powertoolsの仕様です。
         *
         */
        status_code: number;
        /** Bad Request Error Message */
        message: string;
    };
}
export interface Response$postInquiryItem$Status$401 {
    /** Unauthorized Error Schema */
    "application/json": {
        /**
         *
         * HTTPのステータスコードです。
         * 詳しくは、[HTTPステータスコード](https://developer.mozilla.org/ja/docs/Web/HTTP/Status)を参照してください。
         * これがレスポンスの型に入るのはLambda Powertoolsの仕様です。
         *
         */
        status_code: number;
        /** Unauthorized Error Message */
        message: string;
    };
}
export interface Response$postInquiryItem$Status$422 {
    "application/json": Schemas.HTTPValidationError;
}
export interface Response$postInquiryItem$Status$500 {
    /** Internal Server Error Schema */
    "application/json": {
        /**
         *
         * HTTPのステータスコードです。
         * 詳しくは、[HTTPステータスコード](https://developer.mozilla.org/ja/docs/Web/HTTP/Status)を参照してください。
         * これがレスポンスの型に入るのはLambda Powertoolsの仕様です。
         */
        status_code: number;
        /** Internal Server Error Message */
        message: string;
    };
}
export interface Response$fetchAllEntries$Status$200 {
    "application/json": Schemas.EntrySchema[];
}
export interface Response$fetchAllEntries$Status$400 {
    /** Bad Request Error Schema */
    "application/json": {
        /**
         *
         * HTTPのステータスコードです。
         * 詳しくは、[HTTPステータスコード](https://developer.mozilla.org/ja/docs/Web/HTTP/Status)を参照してください。
         * これがレスポンスの型に入るのはLambda Powertoolsの仕様です。
         *
         */
        status_code: number;
        /** Bad Request Error Message */
        message: string;
    };
}
export interface Response$fetchAllEntries$Status$401 {
    /** Unauthorized Error Schema */
    "application/json": {
        /**
         *
         * HTTPのステータスコードです。
         * 詳しくは、[HTTPステータスコード](https://developer.mozilla.org/ja/docs/Web/HTTP/Status)を参照してください。
         * これがレスポンスの型に入るのはLambda Powertoolsの仕様です。
         *
         */
        status_code: number;
        /** Unauthorized Error Message */
        message: string;
    };
}
export interface Response$fetchAllEntries$Status$404 {
    /** Not Found Error Schema */
    "application/json": {
        /**
         *
         * HTTPのステータスコードです。
         * 詳しくは、[HTTPステータスコード](https://developer.mozilla.org/ja/docs/Web/HTTP/Status)を参照してください。
         * これがレスポンスの型に入るのはLambda Powertoolsの仕様です。
         */
        status_code: number;
        /** Not Found Error Message */
        message: string;
    };
}
export interface Response$fetchAllEntries$Status$422 {
    "application/json": Schemas.HTTPValidationError;
}
export interface Response$fetchAllEntries$Status$500 {
    /** Internal Server Error Schema */
    "application/json": {
        /**
         *
         * HTTPのステータスコードです。
         * 詳しくは、[HTTPステータスコード](https://developer.mozilla.org/ja/docs/Web/HTTP/Status)を参照してください。
         * これがレスポンスの型に入るのはLambda Powertoolsの仕様です。
         */
        status_code: number;
        /** Internal Server Error Message */
        message: string;
    };
}
export interface RequestBody$createEntry {
    "application/json": Schemas.EntryCreateRequestSchema;
}
export interface Response$createEntry$Status$201 {
    "application/json": Schemas.EntrySchema;
}
export interface Response$createEntry$Status$400 {
    /** Bad Request Error Schema */
    "application/json": {
        /**
         *
         * HTTPのステータスコードです。
         * 詳しくは、[HTTPステータスコード](https://developer.mozilla.org/ja/docs/Web/HTTP/Status)を参照してください。
         * これがレスポンスの型に入るのはLambda Powertoolsの仕様です。
         *
         */
        status_code: number;
        /** Bad Request Error Message */
        message: string;
    };
}
export interface Response$createEntry$Status$401 {
    /** Unauthorized Error Schema */
    "application/json": {
        /**
         *
         * HTTPのステータスコードです。
         * 詳しくは、[HTTPステータスコード](https://developer.mozilla.org/ja/docs/Web/HTTP/Status)を参照してください。
         * これがレスポンスの型に入るのはLambda Powertoolsの仕様です。
         *
         */
        status_code: number;
        /** Unauthorized Error Message */
        message: string;
    };
}
export interface Response$createEntry$Status$422 {
    "application/json": Schemas.HTTPValidationError;
}
export interface Response$createEntry$Status$500 {
    /** Internal Server Error Schema */
    "application/json": {
        /**
         *
         * HTTPのステータスコードです。
         * 詳しくは、[HTTPステータスコード](https://developer.mozilla.org/ja/docs/Web/HTTP/Status)を参照してください。
         * これがレスポンスの型に入るのはLambda Powertoolsの仕様です。
         */
        status_code: number;
        /** Internal Server Error Message */
        message: string;
    };
}
export interface Response$healthcheck$Status$200 {
    "application/json": Schemas.HealthCheckSchema;
}
export interface Response$healthcheck$Status$400 {
    /** Bad Request Error Schema */
    "application/json": {
        /**
         *
         * HTTPのステータスコードです。
         * 詳しくは、[HTTPステータスコード](https://developer.mozilla.org/ja/docs/Web/HTTP/Status)を参照してください。
         * これがレスポンスの型に入るのはLambda Powertoolsの仕様です。
         *
         */
        status_code: number;
        /** Bad Request Error Message */
        message: string;
    };
}
export interface Response$healthcheck$Status$401 {
    /** Unauthorized Error Schema */
    "application/json": {
        /**
         *
         * HTTPのステータスコードです。
         * 詳しくは、[HTTPステータスコード](https://developer.mozilla.org/ja/docs/Web/HTTP/Status)を参照してください。
         * これがレスポンスの型に入るのはLambda Powertoolsの仕様です。
         *
         */
        status_code: number;
        /** Unauthorized Error Message */
        message: string;
    };
}
export interface Response$healthcheck$Status$422 {
    "application/json": Schemas.HTTPValidationError;
}
export interface Response$healthcheck$Status$500 {
    /** Internal Server Error Schema */
    "application/json": {
        /**
         *
         * HTTPのステータスコードです。
         * 詳しくは、[HTTPステータスコード](https://developer.mozilla.org/ja/docs/Web/HTTP/Status)を参照してください。
         * これがレスポンスの型に入るのはLambda Powertoolsの仕様です。
         */
        status_code: number;
        /** Internal Server Error Message */
        message: string;
    };
}
export type ResponseContentType$fetchInquiryItem = keyof Response$fetchInquiryItem$Status$200;
export interface Params$fetchInquiryItem {
    parameter: Parameter$fetchInquiryItem;
}
export type ResponseContentType$findEntryById = keyof Response$findEntryById$Status$200;
export interface Params$findEntryById {
    parameter: Parameter$findEntryById;
}
export type ResponseContentType$fetchAllInquiryItems = keyof Response$fetchAllInquiryItems$Status$200;
export type RequestContentType$postInquiryItem = keyof RequestBody$postInquiryItem;
export type ResponseContentType$postInquiryItem = keyof Response$postInquiryItem$Status$200;
export interface Params$postInquiryItem {
    requestBody: RequestBody$postInquiryItem["application/json"];
}
export type ResponseContentType$fetchAllEntries = keyof Response$fetchAllEntries$Status$200;
export type RequestContentType$createEntry = keyof RequestBody$createEntry;
export type ResponseContentType$createEntry = keyof Response$createEntry$Status$201;
export interface Params$createEntry {
    requestBody: RequestBody$createEntry["application/json"];
}
export type ResponseContentType$healthcheck = keyof Response$healthcheck$Status$200;
export type HttpMethod = "GET" | "PUT" | "POST" | "DELETE" | "OPTIONS" | "HEAD" | "PATCH" | "TRACE";
export interface ObjectLike {
    [key: string]: any;
}
export interface QueryParameter {
    value: any;
    style?: "form" | "spaceDelimited" | "pipeDelimited" | "deepObject";
    explode: boolean;
}
export interface QueryParameters {
    [key: string]: QueryParameter;
}
export type SuccessResponses = Response$fetchInquiryItem$Status$200 | Response$findEntryById$Status$200 | Response$fetchAllInquiryItems$Status$200 | Response$postInquiryItem$Status$200 | Response$fetchAllEntries$Status$200 | Response$createEntry$Status$201 | Response$healthcheck$Status$200;
export namespace ErrorResponse {
    export type fetchInquiryItem = Response$fetchInquiryItem$Status$400 | Response$fetchInquiryItem$Status$401 | Response$fetchInquiryItem$Status$404 | Response$fetchInquiryItem$Status$422 | Response$fetchInquiryItem$Status$500;
    export type findEntryById = Response$findEntryById$Status$400 | Response$findEntryById$Status$401 | Response$findEntryById$Status$404 | Response$findEntryById$Status$422 | Response$findEntryById$Status$500;
    export type fetchAllInquiryItems = Response$fetchAllInquiryItems$Status$400 | Response$fetchAllInquiryItems$Status$401 | Response$fetchAllInquiryItems$Status$404 | Response$fetchAllInquiryItems$Status$422 | Response$fetchAllInquiryItems$Status$500;
    export type postInquiryItem = Response$postInquiryItem$Status$400 | Response$postInquiryItem$Status$401 | Response$postInquiryItem$Status$422 | Response$postInquiryItem$Status$500;
    export type fetchAllEntries = Response$fetchAllEntries$Status$400 | Response$fetchAllEntries$Status$401 | Response$fetchAllEntries$Status$404 | Response$fetchAllEntries$Status$422 | Response$fetchAllEntries$Status$500;
    export type createEntry = Response$createEntry$Status$400 | Response$createEntry$Status$401 | Response$createEntry$Status$422 | Response$createEntry$Status$500;
    export type healthcheck = Response$healthcheck$Status$400 | Response$healthcheck$Status$401 | Response$healthcheck$Status$422 | Response$healthcheck$Status$500;
}
export interface Encoding {
    readonly contentType?: string;
    headers?: Record<string, any>;
    readonly style?: "form" | "spaceDelimited" | "pipeDelimited" | "deepObject";
    readonly explode?: boolean;
    readonly allowReserved?: boolean;
}
export interface RequestArgs {
    readonly httpMethod: HttpMethod;
    readonly url: string;
    headers: ObjectLike | any;
    requestBody?: ObjectLike | any;
    requestBodyEncoding?: Record<string, Encoding>;
    queryParameters?: QueryParameters | undefined;
}
export interface ApiClient<RequestOption> {
    request: <T = SuccessResponses>(requestArgs: RequestArgs, options?: RequestOption) => Promise<T>;
}
export class Client<RequestOption> {
    private baseUrl: string;
    constructor(private apiClient: ApiClient<RequestOption>, baseUrl: string) { this.baseUrl = baseUrl.replace(/\/$/, ""); }
    /**
     * IDと作成時間を指定して問い合わせデータを取得
     *
     * ## 概要
     *
     * ユーザーIDと作成時間で指定した問い合わせデータを取得します。
     *
     * ## 詳細
     *
     * idとcreated_atで指定した問い合わせデータを取得します。
     * データが見つからない場合は、`404 Not Found`が返されます。
     *
     * ## 変更履歴
     *
     * - 2024/9/6: 初版作成
     * - 2024/9/26: postからgetに変更
     */
    public async fetchInquiryItem(params: Params$fetchInquiryItem, option?: RequestOption): Promise<Response$fetchInquiryItem$Status$200["application/json"]> {
        const url = this.baseUrl + `/inquiry/${encodeURIComponent(params.parameter.id)}`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            created_at: { value: params.parameter.created_at, explode: false }
        };
        return this.apiClient.request({
            httpMethod: "GET",
            url,
            headers,
            queryParameters: queryParameters
        }, option);
    }
    /**
     * IDと作成時間を指定してエントリーデータを取得
     *
     * ## 概要
     *
     * ユーザーIDと作成時間で指定したエントリーデータを取得します。
     */
    public async findEntryById(params: Params$findEntryById, option?: RequestOption): Promise<Response$findEntryById$Status$200["application/json"]> {
        const url = this.baseUrl + `/entries/${encodeURIComponent(params.parameter.id)}/${encodeURIComponent(params.parameter.createdAt)}`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "GET",
            url,
            headers
        }, option);
    }
    /**
     * 全ての問い合わせデータを取得
     *
     * ## 概要
     *
     * 全ての問い合わせデータを取得します。
     *
     * ## 詳細
     *
     * 全ての問い合わせデータを取得します。取得したデータは、`InquiryResponseSchema`を参照してください。
     * データが存在しない場合は、空の配列が返されます。
     *
     * ## 変更履歴
     *
     * - 2024/9/6: 初版作成
     */
    public async fetchAllInquiryItems(option?: RequestOption): Promise<Response$fetchAllInquiryItems$Status$200["application/json"]> {
        const url = this.baseUrl + `/inquiry`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "GET",
            url,
            headers
        }, option);
    }
    /**
     * 問い合わせデータを登録
     *
     * ## 概要
     *
     * 問い合わせデータを登録します。
     *
     * ## 詳細
     *
     * 問い合わせデータを登録します。
     * 登録するデータは`CreateInquiryRequestSchema`を参照してください。
     *
     * ## 変更履歴
     *
     * - 2024/9/6: 初版作成
     */
    public async postInquiryItem(params: Params$postInquiryItem, option?: RequestOption): Promise<Response$postInquiryItem$Status$200["application/json"]> {
        const url = this.baseUrl + `/inquiry`;
        const headers = {
            "Content-Type": "application/json",
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "POST",
            url,
            headers,
            requestBody: params.requestBody
        }, option);
    }
    /**
     * 全てのエントリーデータを取得
     *
     * ## 概要
     *
     * 全てのエントリーデータを取得します。
     */
    public async fetchAllEntries(option?: RequestOption): Promise<Response$fetchAllEntries$Status$200["application/json"]> {
        const url = this.baseUrl + `/entries`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "GET",
            url,
            headers
        }, option);
    }
    /**
     * エントリーデータを登録
     *
     * ## 概要
     *
     * エントリーデータを登録します。
     */
    public async createEntry(params: Params$createEntry, option?: RequestOption): Promise<Response$createEntry$Status$201["application/json"]> {
        const url = this.baseUrl + `/entries`;
        const headers = {
            "Content-Type": "application/json",
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "POST",
            url,
            headers,
            requestBody: params.requestBody
        }, option);
    }
    /**
     * Health Check
     *
     * ## 概要
     *
     * サーバーの稼働状況を確認するためのエンドポイントです。
     *
     * ## 詳細
     *
     * 基本的には常に Status Code 200: で`ok` が返却されます。
     * それ以外の場合は、サーバーに問題が発生している可能性がありますのでお手数ですが、早野または福田までご連絡ください。
     *
     * ## APIのバージョン情報
     *
     * APIのバージョンは、環境変数で`API_VERSION_HASH` として注入されます。ローカルからデプロイされた場合`latest` になります。
     *
     * ## 変更履歴
     *
     * - 2024/05/10: ヘルスチェックエンドポイントを追加
     */
    public async healthcheck(option?: RequestOption): Promise<Response$healthcheck$Status$200["application/json"]> {
        const url = this.baseUrl + `/healthcheck`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "GET",
            url,
            headers
        }, option);
    }
}
